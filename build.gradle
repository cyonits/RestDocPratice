plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'

    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'jacoco'
}

group = 'com.restDoc'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    implementation 'mysql:mysql-connector-java:8.0.33'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.named('test') {
    useJUnitPlatform()

    finalizedBy('jacocoTestReport')
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

asciidoctor {
    dependsOn test

    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
}

bootJar.doFirst {
    copy {
        from("${asciidoctor.outputDir}")
        into 'src/main/resources/static/docs'
    }
}

bootJar {
    dependsOn asciidoctor

    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = false
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it,
//                            excludes: ['**/service/**'],
                            includes: ['**/controller/**','**/service/**']
                    )
                })
        )
    }

    finalizedBy('jacocoTestCoverageVerification')
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }

//            excludes = ['**.service.**']
            includes = ['**.controller.**','**.service.**']
        }
    }
}